cmake_minimum_required(VERSION 3.16)
project(notely LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON )
if (EXISTS "${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json")
	execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json ${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json)
endif()

include(cmake/fetch_extern.cmake)

set(CMAKE_SKIP_INSTALL_RULES YES)
find_package(Threads REQUIRED)
set(GRPC_VERSION v1.59.2)
set(gRPC_INSTALL_default OFF)
set(protobuf_INSTALL OFF)
set(utf8_range_ENABLE_INSTALL OFF)
set(protobuf_BUILD_PROTOBUF_BINARIES ON)
set(protobuf_BUILD_PROTOC_BINARIES ON)
fetch_extern(grpc https://github.com/grpc/grpc ${GRPC_VERSION})
fetch_extern(boost https://github.com/boostorg/boost boost-1.81.0)

set(GOOGLE_CLOUD_CPP_ENABLE "bigquery;")
add_library(gRPC::grpc++ ALIAS grpc++)
add_library(gRPC::grpc ALIAS grpc)
add_executable(gRPC::grpc_cpp_plugin ALIAS grpc_cpp_plugin)
add_library(OpenSSL::Crypto ALIAS crypto)
add_library(protobuf::libprotobuf ALIAS libprotobuf)
set(BUILD_TESTING OFF)
set(GOOGLE_CLOUD_CPP_ENABLE_REST OFF)
fetch_extern(google-cloud-cpp https://github.com/mratedca/google-cloud-cpp main)

set(SNAPPY_BUILD_TESTS OFF)
set(SNAPPY_BUILD_BENCHMARKS OFF)
set(SNAPPY_INSTALL OFF)
fetch_extern(snappy https://github.com/google/snappy main)
set(AVRO_INSTALL OFF)
set(AVROGEN_CPP OFF)
fetch_extern(avro https://github.com/mattpaletta/avro main)

add_executable(test_download app/test_download.cpp)
target_link_libraries(test_download google-cloud-cpp::bigquery avrocpp_s)